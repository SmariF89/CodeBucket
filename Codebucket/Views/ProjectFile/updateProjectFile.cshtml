@model Codebucket.Models.ViewModels.ProjectFileViewModel
<head>
	<link href="@Url.Content("~/Content/Site.css")" rel="stylesheet" type="text/css" />
</head>

@*link to the ace website: https://ace.c9.io/#nav=embedding*@

<div class="form-group">
    <div class="SideBySide">
        <div class="file-name">
            <h2>@Model._projectFileName</h2>
        </div>
    </div>
    <div class="SideBySide">
        <label for="theme" class="control-label">Theme:</label>
        <select id="theme" class="form-control">
            <option value="ambiance">ambiance</option>
            <option value="chrome">chrome</option>
            <option value="clouds">clouds</option>
            <option value="clouds_midnight">clouds_midnight</option>
            <option value="github">github</option>
            <option value="monokai" selected>monokai</option>
            <option value="xcode">xcode</option>
        </select>
    </div>
</div>

@*This is where Ace is shown*@
<div id="editor"></div>
@*Automatic language detection connected to this div*@
<div id="language">@Model._aceExtension</div>

<div id="documentID">@Model._id</div>

<form id="data" method="post">
    @Html.HiddenFor(model => model._id, new { htmlAttributes = new { @class = "editor" } })
    @Html.HiddenFor(model => model._projectFileName, new { htmlAttributes = new { @class = "editor" } })
    @Html.HiddenFor(model => model._projectFileType, new { htmlAttributes = new { @class = "editor" } })
    @Html.HiddenFor(model => model._projectFile, new { htmlAttributes = new { @class = "editor" } })
    @Html.HiddenFor(model => model._aceExtension, new { htmlAttributes = new { @class = "editor" } })
    @Html.HiddenFor(model => model._projectID, new { htmlAttributes = new { @class = "editor" } })

        <textarea class="editor">@Model._projectFileData</textarea>
        @Html.TextAreaFor(model => model._projectFileData, new { @class = "editor" })
        <button type="submit" class="SaveButtonEdit" @*id="SaveButtonEdit"*@>Save</button>
        @Html.ActionLink("Back", "displayProject", new { id = Model._projectID, onclick = "BackBTN();" }, new { @class = "waves-effect waves-light btn"})
    </form>
    <div class="chat">
        <h2 class="h2Chat">Chat</h2>

    <div class="container">
        <input type="text" id="message" class="message" />
        <input type="button" id="sendmessage" value="Send" class="sendMessage" />
        <input type="hidden" id="displayname" class="DisplayName" />
        <ul id="discussion"></ul>
    </div>
</div>

@section scripts
{
<script src="~/ace/src-noconflict/ace.js" type="text/javascript" charset="utf-8"></script>
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"></script>

<script src="~/Scripts/jquery.signalR-2.2.2.js"></script>
<!--Reference the autogenerated SignalR hub script. -->
<script src="~/signalr/hubs"></script>
<script>
    @*
	var documentid = $('#documentid').text();

	var editor = (function () {
		var aceeditor = ace.edit("editor");
		// default theme
		aceeditor.settheme("ace/theme/monokai");
		// default mode
		var language = $('#language').text();
		$('#language').hide();
		aceeditor.getsession().setmode("ace/mode/" + language);
		return aceeditor;
	})();

	$('#theme').change(function () {
		var e = document.getelementbyid("theme");
		var strtheme = e.options[e.selectedindex].value;
		editor.settheme("ace/theme/" + strtheme);
	});

	$('#mode').change(function () {
		var e = document.getelementbyid("mode");
		var strmode = e.options[e.selectedindex].value;
		editor.getsession().setmode("ace/mode/" + strmode);
	});

	var textarea = $('textarea[class="editor"]').hide()
	editor.getsession().setvalue(textarea.val());
	editor.getsession().on('change', function () {
		textarea.val(editor.getsession().getvalue());
	});

	var codehub = $.connection.codehub;
	var silent = false;
    
	codehub.client.onchange = function (changedata) {
	    console.log(changedata);
	    silent = true;
	    editor.getsession().getdocument().applydelta(changedata);
	    silent = false;
	};

	$.connection.hub.start().done(function () {
	    codehub.server.joindocument(documentid);
	    editor.on("change", function (obj) {
	        if(silent){
	            return;
	        }
	        console.log(obj);
	        codehub.server.onchange(obj, documentid);
	    });
	});*@

    @* here the chat option comes in*@
    
    $(function () {
            // Reference the auto-generated proxy for the hub.
            var chat = $.connection.chatHub;
            // Create a function that the hub can call back to display messages.
            chat.client.addNewMessageToPage = function (name, message) {
                // Add the message to the page.
                $('#discussion').append('<li> <strong>' + htmlEncode(name)+ '</strong>: ' + htmlEncode(message) + '</li>');
            };
            // Get the user name and store it to prepend to messages.
           // $('#displayname').val(prompt('Enter your name:', ''));
            // Set initial focus to message input box.
            $('#message').focus();
            // Start the connection.
            $.connection.hub.start().done(function () {
                $('#sendmessage').click(function () {
                    // Call the Send method on the hub.
                    chat.server.send($('#displayname').val(), $('#message').val());
                    // Clear text box and reset focus for next comment.
                    $('#message').val('').focus();
                });
            });
        });
        // This optional function html-encodes messages for display in the page.
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }

</script>
}